{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-sso-js/./src/commands/commands.js"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global Office */\n//const express = require(\"express\");\n//const https = require(\"https\");\n//const msal = require(\"@azure/msal-node\");\n//const jwt = require(\"jsonwebtoken\");\n//const fetch = require('node-fetch');\n//import { ConfidentialClientApplication } from '@azure/msal-node';\n//import { getUserProfile } from \"../helpers/sso-helper\";\n//import { getAccessToken } from \"../middle-tier/ssoauth-helper\";\n//import { filterUserProfileInfo } from \"./../helpers/documentHelper\";\n\nimport { LogLevel, PublicClientApplication } from \"@azure/msal-browser\";\n\nconst conclientID=\"6d00ba1d-6af8-4fc7-9236-73d9d5a8c883\";\nconst conclientSecret=\"~xc8Q~mL_JXgXWLe4XYEuMBPvySiCV_uGuBtxa7n\";\nconst contenantID=\"9f3af378-fae3-47e0-9d74-ae571d453bf1\";\n\nconst clientId = \"6d00ba1d-6af8-4fc7-9236-73d9d5a8c883\"; //This is your client ID\nconst accessScope = `api://${window.location.host}/${clientId}/access_as_user`;\nconst loginRequest = {\n  scopes: [accessScope],\n  extraScopesToConsent: [\"user.read\"],\n};\n\n\n/* Office.onReady((info) => {\n   if (info.host === Office.HostType.Outlook) {\n     console.log(\"inside office.hostype.outlook\"); \n }\n}); */\n\n(function () {\n  Office.onReady(function () {\n    console.log(\"ima inside onready\");\n    // Function to extract access token from URL query parameters\n    function getParameterByName(name, url) {\n      if (!url) url = window.location.href;\n      name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n      var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n          results = regex.exec(url);\n      if (!results) return null;\n      if (!results[2]) return '';\n      return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n    }\n\n    // Get access token from URL\n    var accessToken = getParameterByName('access_token');\n\n    // Send access token back to the add-in\n    Office.context.ui.messageParent(accessToken);\n  });\n})();\n\n\n// to get the office token\nasync function getMyOfficeToken() {\n  return new Promise((resolve, reject) => {\n    Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function (\n      result\n    ) {\n      if (result.status === \"succeeded\") {\n        const accessToken = result.value;\n        console.log(accessToken + \" my access token\");\n        resolve(accessToken);\n      } else {\n        console.log(\"Handle the error\");\n        reject(new Error(\"Failed to get token\"));\n      }\n    });\n  });\n}\n\n// Function to add categories to the item\nasync function addCategoriesToItem(item, categories){\n  return new Promise((resolve, reject) => {\n      item.categories.addAsync(categories, (asyncResult) => {\n          if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n              resolve();\n          } else {\n              reject(new Error(\"Failed to add categories\"));\n          }\n      });\n  });\n};\n\nasync function exchangeAccessTokenSSO(accessToken){\n  // Use the OBO flow to get a new access token with permissions to Microsoft Graph\nconst oboTokenUrl = 'https://login.microsoftonline.com/9f3af378-fae3-47e0-9d74-ae571d453bf1/oauth2/token';\nconst oboParams = {\n   grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n   client_id: conclientID,\n   client_secret: conclientSecret,\n   assertion: accessToken, // The original access token obtained from SSO\n   scope: 'https://graph.microsoft.com/.default', // Request permissions for Microsoft Graph\n};\nawait axios.post(oboTokenUrl, null, { params: oboParams })\n   .then((response) => {\n       const graphAccessToken = response.data.access_token;\n       // Now you can use graphAccessToken to call Microsoft Graph APIs\n       // (e.g., fetch user profile, calendar events, etc.)\n       console.log(`Graph access token: ${graphAccessToken}`);\n   })\n   .catch((error) => {\n       console.error(`Error getting Graph access token: ${error.message}`);\n   });\n}\n\nasync function exchangeAccessToken(accessToken) {\n  console.log(\"inside exchange accesstoken\");\n  try {\n      const response = await fetch(\"https://login.microsoftonline.com/9f3af378-fae3-47e0-9d74-ae571d453bf1/oauth2/v2.0/token\", {\n          method: \"POST\",\n          headers: {\n              \"Content-Type\": \"application/x-www-form-urlencoded\",\n          },\n          body: new URLSearchParams({\n              client_id: conclientID,\n              client_secret: conclientSecret,\n              grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n              assertion: accessToken,\n              requested_token_use: \"on_behalf_of\",\n              scope: \"openid profile email User.Read Mail.Read\", // Add necessary scopes here\n          }),\n      });\n      console.log(\"inside exchange accesstoken\");\n      const data = await response.json();\n      console.log(data)+\"data response\";\n      if (response.ok) {\n          return data.access_token;\n      } else {\n          throw new Error(`Failed to exchange access token: ${data.error_description}`);\n      }\n  } catch (error) {\n      throw new Error(`Failed to exchange access token: ${error.message}`);\n  }\n}\n/**\n * Shows a notification when the add-in command is executed.\n * @param event {Office.AddinCommands.Event}\n */\n\nasync function action(event) {\n  try {\n      const item = Office.context.mailbox.item;\n      console.log(item.subject);\n      const categoriesToAdd = [\"Send to Salesforce\"];\n      // Add categories to the item\n      await addCategoriesToItem(item, categoriesToAdd);\n      console.log(\"Categories added successfully.434\");\n\n    // Call the SSO login function asynchronously\n    const accessToken = await loginWithSSO();\n    \n    // Use the access token as needed\n    console.log(\"Access Token:\", accessToken);\n\n      // Usage example\n     // var accessToken = await loginWithMicrosoft();\n     // console.log(accessToken); // Access token retrieved from the login window\n\n      // Add postfix to the subject\n      const subjectPostfix = \"Send to Salesforce\";\n      item.subject += ` ${subjectPostfix}`;\n      \n      // Display a notification message\n      const message = {\n          type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n          message: \"Categories added successfully with subject\",\n          icon: \"Icon.80x80\",\n          persistent: true,\n      };\n      Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", message);\n      // Wait for a brief period (e.g., 1 second) to allow syncing\n      //await new Promise((resolve) => setTimeout(resolve, 1000));\n\n\n  } catch (error) {\n      console.error(\"Error adding categories:\", error.message);\n  }\n  // Save changes to the item\n \n  event.completed();\n}\n\n// Register the function with Office.\nOffice.actions.associate(\"action\", action);\n\n\n\n/*\n\n\nasync function loginWithSSO() {\n  return new Promise((resolve, reject) => {\n    // Define your Azure AD app details\n    const clientId = \"6d00ba1d-6af8-4fc7-9236-73d9d5a8c883\";\n    const redirectUri = 'https://emailtosf.azurewebsites.net/login.html';\n    const scopes = 'openid profile email'; // Define required scopes\n    \n   //var authUrl = `https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=${clientId}&response_type=code&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${encodeURIComponent(scopes)}`;\n    var authUrl = 'https://emailtosf.azurewebsites.net/login.html';\n    Office.context.ui.displayDialogAsync(authUrl, { height: 30, width: 20 }, function(result) {\n      if (result.status === Office.AsyncResultStatus.Failed) {\n        console.error(\"Failed to display dialog:\", result.error.message);\n        reject(result.error);\n      } else {\n        var dialog = result.value;\n        dialog.addEventHandler(Office.EventType.DialogMessageReceived, function(eventArgs) {\n          var accessToken = eventArgs.message; // Access token received from the dialog\n          // Check if access token is valid\n          if (accessToken && accessToken !== '{\"status\":\"failure\",\"result\":{}}') {\n            // Use the access token as needed\n            console.log(\"Access Token:\", accessToken);\n            // Resolve the promise with the access token\n            resolve(accessToken);\n          } else {\n            // Reject the promise with an error\n            reject(new Error(\"Failed to retrieve access token.\"));\n          }\n          // Close the dialog after receiving the access token\n          dialog.close();\n        });\n      }\n    });\n  });\n}\n\nasync function loginWithSSO_OLD() {\n  return new Promise((resolve, reject) => {\n    // Define your Azure AD app details\n    const clientId = \"6d00ba1d-6af8-4fc7-9236-73d9d5a8c883\";\n    const redirectUri = 'https://emailtosf.azurewebsites.net/fallbackauthdialog.html';\n    const scopes = 'openid profile email'; // Define required scopes\n    \n    //var authUrl = `https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=${clientId}&response_type=code&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${encodeURIComponent(scopes)}`;\n    var authUrl = 'https://emailtosf.azurewebsites.net/fallbackauthdialog.html';\n    Office.context.ui.displayDialogAsync(authUrl, { height: 30, width: 20 }, function(result) {\n      if (result.status === Office.AsyncResultStatus.Failed) {\n        console.error(\"Failed to display dialog:\", result.error.message);\n        reject(result.error);\n      } else {\n        var dialog = result.value;\n        dialog.addEventHandler(Office.EventType.DialogMessageReceived, function(eventArgs) {\n          var accessToken = eventArgs.message; // Access token received from the dialog\n          // Use the access token as needed\n          console.log(\"Access Token:\", accessToken);\n          // Resolve the promise with the access token\n          resolve(accessToken);\n          // Close the dialog after receiving the access token\n          dialog.close();\n        });\n      }\n    });\n  });\n}\n\n\nasync function getAccessTokenAsyncMyLink() {\n  console.log(\"inside getaccesstokenasync\");\n    try {\n        const msalConfig = {\n        auth: {\n          clientId: conclientID,\n          authority: \"https://login.microsoftonline.com/\"+contenantID,\n          clientSecret: conclientSecret\n        }\n      };\n      var client = new msal.ConfidentialClientApplication(msalConfig);\n      var request = {\n        scopes: [ 'https://graph.microsoft.com/.default' ]\n      };\n  \n    let response = await client.acquireTokenByClientCredential(request);\n      console.log(response);\n      return response;\n    }catch (error) {\n      console.error(\"Error acquiring token:\", error);\n      throw error;\n    }\n  }\n\n\n// Function to set categories for an Outlook item using Microsoft Graph API\nasync function setCategories(accessToken, messageId, categories) {\n  console.log(\"iam inside the graph api\");\n  console.log(\"55555555555555\")\n  console.log(messageId);\n  console.log(\"555555555566\")\n  console.log(categories);\n  try {\n      const apiUrl = `https://graph.microsoft.com/v1.0/me/messages/${messageId}`;\n      \n      // Construct the request headers with the access token\n      const headers = {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n      };\n\n      // Construct the request body with the categories to be set\n      const requestBody = {\n          categories: categories\n      };\n\n      // Send a PATCH request to update the message's categories\n      const response = await fetch(apiUrl, {\n          method: 'PATCH',\n          headers: headers,\n          body: JSON.stringify(requestBody)\n      });\n\n      // Check if the request was successful\n      if (!response.ok) {\n          throw new Error(`Failed to set categories: ${response.statusText}`);\n      }\n\n      // Categories were successfully updated\n      console.log('Categories updated successfully.');\n  } catch (error) {\n      console.error('Error setting categories:', error.message);\n  }\n}\n\n\n\n    Office.context.mailbox.getCallbackTokenAsync({isRest: true}, function(result){\n      if (result.status === \"succeeded\") {\n        const accessToken = result.value;\n       // const myMsgID = Office.context.mailbox.item.itemId;\n        const myMsgID =  Office.context.mailbox.convertToRestId(Office.context.mailbox.item.itemId,Office.MailboxEnums.RestVersion.v2_0);\n        console.log(accessToken+\"my access token\");\n        setCategories(accessToken,myMsgID,[\"Send to Salesforce\"]);\n      } else {\n        // Handle the error.\n      }\n    });\n\nOffice.onReady((info) => {\n//   if (Office.context.mailbox.diagnostics.hostName === \"Outlook\") {\n//    // If needed, Office.js is ready to be called\n//  addCategoriesOnClick();\n//   }\n  //addCategoriesOnClick();\n  console.log(\"start onready here\");\n  if (info.host === Office.HostType.Outlook) {\n    // Add-in command for changing category\n    console.log(\"making onready to work\");\n  //  openChangeCategoryDialog();\n //   addCategoriesOnClick();\n}\n});\n\nfunction openChangeCategoryDialog() {\n  console.log(\"inside open change dialog\")\n  Office.context.ui.displayDialogAsync('https://stgacccgo3tsiaddin.blob.core.windows.net/$web/dialog.html/dialog.html', { height: 50, width: 50 }, function (result) {\n      if (result.status === Office.AsyncResultStatus.Succeeded) {\n          var dialog = result.value;\n          dialog.addEventHandler(Office.EventType.DialogMessageReceived, function (args) {\n              var message = args.message;\n              // Assuming the message received from the dialog indicates the category change\n              if (message === \"categoryChanged\") {\n                  changeCategory();\n              }\n          });\n      } else {\n          console.error('Error: ' + result.error.message);\n      }\n  });\n}\n\nfunction changeCategory() {\n  Office.context.mailbox.item.categories.addAsync([\"Important\"], function (result) {\n      if (result.status === Office.AsyncResultStatus.Succeeded) {\n          console.log(\"Category added successfully.\");\n      } else {\n          console.error(\"Error adding category: \" + result.error.message);\n      }\n  });\n}\n\n\n// Function to get categories of the item\nconst getItemCategories = (item) => {\n  return new Promise((resolve, reject) => {\n      item.categories.getAsync((asyncResult) => {\n          if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n              resolve(asyncResult.value || []);\n          } else {\n              reject(new Error(\"Failed to get existing categories\"));\n          }\n      });\n  });\n};\n\n// Function to add categories to the item\nconst addCategoriesToItem2 = (item, categories) => {\n  return new Promise((resolve, reject) => {\n      item.categories.addAsync(categories, (asyncResult) => {\n          if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n              resolve();\n          } else {\n              reject(new Error(\"Failed to add categories\"));\n          }\n      });\n  });\n};\n\n// Function to add categories when the command button is clicked\nconst addCategoriesOnClick = async () => {\n  const item = Office.context.mailbox.item;\n  console.log(\"addCategoriesOnClick\");\n  const categoriesToAdd = [\"Send to Salesforce\"];\n  console.log(\"starting the addcategoriesonclient\");\n  try {\n      // Get existing categories\n      const existingCategories = await getItemCategories(item);\n     console.log(existingCategories+\"Getting the existing category\");\n      // Filter out categories that don't already exist\n      const categoriesToAddFiltered = categoriesToAdd.filter(category => !existingCategories.includes(category));\n       console.log(categoriesToAddFiltered+\"filter categories to add\");\n      // Add new categories\n      if (categoriesToAddFiltered.length > 0) {\n          await addCategoriesToItem(item, categoriesToAddFiltered);\n          console.log(\"Successfully added categories to the item.\");\n      } else {\n          console.log(\"Categories already exist in the item.\");\n      }\n  } catch (error) {\n      console.error(\"Error adding categories: \" + error.message);\n  }\n};\n*/\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","addCategoriesToItem","_x","_x2","_addCategoriesToItem","_callee2","item","categories","_context2","addAsync","asyncResult","status","Office","AsyncResultStatus","Succeeded","_action","_callee5","event","categoriesToAdd","accessToken","message","_context5","context","mailbox","console","log","subject","loginWithSSO","concat","MailboxEnums","ItemNotificationMessageType","InformationalMessage","icon","persistent","notificationMessages","replaceAsync","t0","completed","window","location","host","onReady","url","href","replace","results","RegExp","exec","decodeURIComponent","getParameterByName","ui","messageParent","actions","associate","_x5"],"sourceRoot":""}